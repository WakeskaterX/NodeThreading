{
  "name": "stdio",
  "version": "0.2.3",
  "description": "Standard input/output management with NodeJS",
  "keywords": [
    "input",
    "console",
    "output",
    "terminal",
    "system",
    "arguments",
    "cli"
  ],
  "homepage": "https://github.com/sgmonda/stdio",
  "license": "MIT",
  "main": "main.js",
  "author": {
    "name": "Sergio Garcia Mondaray",
    "email": "sgmonda@gmail.com",
    "url": "http://www.sgmonda.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sgmonda/stdio"
  },
  "dependencies": {},
  "devDependencies": {
    "jasmine-node": "1.14.2",
    "jshint": "2.5.1"
  },
  "engines": {
    "node": "*"
  },
  "readmeFilename": "README.md",
  "scripts": {
    "jshint": "jshint main.js tests",
    "test": "jasmine-node --matchall tests/"
  },
  "readme": "Module for standard input/output management with nodejs.\n\n[![Build Status](https://secure.travis-ci.org/sgmonda/stdio.png)](http://travis-ci.org/sgmonda/stdio)\n\n[![NPM](https://nodei.co/npm/stdio.png)](https://nodei.co/npm/stdio/)\n\n## 1. Installation\n\nTo install the most recent release from npm, run:\n\n    npm install stdio\n\n## 2. Usage\n\nYou can do many things with this module:\n* Parse UNIX-like command line options\n* Read standard input, at once or line by line.\n* Make command-line questions\n\n### 2.1. Parse Unix-like command line options\n\n```javascript\nvar stdio = require('stdio');\nvar ops = stdio.getopt({\n    'check': {key: 'c', args: 2, description: 'What this option means'},\n    'map': {key: 'm', description: 'Another description', mandatory: true},\n    'kaka': {key: 'k', args: 2, mandatory: true},\n    'ooo': {key: 'o'}\n});\nconsole.log(ops);\n```\n\nIf you run the previous example with the command\n\n    node pruebas.js -c 23 45 88 --map -k 23 44 cosa\n\nProgram output will be:\n\n    { check: [ '23', '45' ],\n      args: [ '88', 'cosa' ],\n      map: true,\n      kaka: [ '23', '44' ] }\n\nSo you can check options:\n\n```javascript\nif(ops.map){\n    // Your action\n}\nif(ops.kaka){\n    // Your action, using ops.kaka[0] or ops.kaka[1] or...\n}\n```\n\nAs you can see, every option in `ops` object can have one of the following 3 types of values:\n\n* The boolean value `true` if it has been specified without an `args` attribute.\n* A single `string` if it has been specified with `args: 1`.\n* A `string` array, if it has been specified with `args` > 1.\n\nOptions can have the `multiple` flag, in which case they can appear multiple times (with one argument each time). The value of that option will be an array with all provided arguments:\n\n```javascript\nvar ops = stdio.getopt({\n    'check': {key: 'c', description: 'What this option means', multiple: true}\n});\n```\n```\nnode program.js -c 1 -c 2 -c 3\n```\n```\n{ check: ['1', '2', '3'] }\n\n```\n\nWhen specifying an option, \"args\" can be the string \"*\" instead of a number, in which case all the following arguments when calling the program will be associated to that option (until the next one):\n\n```\nvar ops = stdio.getopt({\n    'check': {args: '*'},\n\t'meta': {key: 'm'}\n});\nconsole.log(ops);\n```\n```\nnode program.js --check 1 2 3 4 5 6 -m 44 2\n```\n```\n{ check: ['1', '2', '3', '4', '5', '6'], meta: true, args: ['44', '2'] }\n```\n\nDefault values can be specified using \"default\" attribute when specifying options. Of course, default value length has to match the specified args count (if it is not '*'):\n\n```\nvar ops = stdio.getopt({\n\tmeta: {args: 2, default: ['a', 'b']}\n});\n```\n\n#### Print usage\n\nThis module generates a descriptive usage message automatically. You'll see it when your program is called with `--help` option, which is automatically supported. The following code:\n\n```javascript\nvar stdio = require('stdio');\n\nvar ops = exports.getopt({\n\tuna: {description: 'Sets something to some value', args: 2, mandatory: true},\n\totra_muy_larga: {description: 'A boolean flag', key: 'o', mandatory: true},\n\tuna_sin_desc: {description: 'Another boolean flag'},\n\tultima: {description: 'A description', key: 'u', args: 1}\n});\n```\n\nwill produce the following output (if it is called with `--help` flag):\n\n```\nUSAGE: node main.js [OPTION1] [OPTION2]... arg1 arg2...\n  --una <ARG1> <ARG2>  \tSets something to some value (mandatory)\n  -o, --otra_muy_larga \tA boolean flag (mandatory)\n  --una_sin_desc       \tAnother boolean flag\n  -u, --ultima <ARG1>  \tA description\n```\n\nIf a non-expected option is given or a mandatory option isn't, then an error will be shown, suggesting to use `--help` option to know how to use your program and finishing it automatically. In case the unknown option is similar to a known one, then a suggestion to use it will be shown.\n\n```\nMissing \"una\" argument.\nTry \"--help\" for more information.\n```\n\nYou can print the help message manually if you want, executing `ops.printHelp()`.\n\n### 2.2. Read standard input at once\n\nThe following code will read the whole standard input at once and put it into `text` variable.\n\n```javascript\nvar stdio = require('stdio');\nstdio.read(function(text){\n    console.log(text);\n});\n```\n\nObviously it is recommended only for small input streams, for instance a small file:\n\n```\nnode myprogram.js < input-file.txt\n```\n\n### 2.3. Read standard input line by line\n\nThe following code will execute dynamically a function over every line, when it is read from the standard input:\n\n```javascript\nvar stdio = require('stdio');\nstdio.readByLines(function lineHandler(line, index) {\n    // You can do whatever you want with every line\n    console.log('Line %d:', index, line);\n}, function (err) {\n    console.log('Finished');\n});\n```\n\nThe previous code will apply `lineHandler()` to every line while they are read, without waiting the whole input to end or buffering it, so it is very useful for large text streams. For instance a continuous log:\n\n```\ntail -f /var/log/system.log | node myprogram.js\n```\n\n### 2.4. Show prompt questions and wait user's answer\n\nThe following code will ask the user for some info and then print it.\n\n```javascript\nstdio.question('What is your name?', function (err, name) {\n    stdio.question('How old are you?', function (err, age) {\n        stdio.question('Are you male or female?', ['male', 'female'], function (err, sex) {\n            console.log('Your name is \"%s\". You are a \"%s\" \"%s\" years old.', name, sex, age);\n        });\n    });\n});\n```\n\nBy default `stdio.question()` offers some retries when allowed answers are restricted (see the male/female question above). If no possible answers are specified, then the user can answer whatever he wants to the question.\n\n## 3. Testing\n\nTo run tests, use the following command from module's root:\n\n````\nnpm test\n````\n",
  "bugs": {
    "url": "https://github.com/sgmonda/stdio/issues"
  },
  "_id": "stdio@0.2.3",
  "dist": {
    "shasum": "9e21551c446e62f0b00d8ccdd1dc8caa9a5c58fb"
  },
  "_from": "stdio@^0.2.3",
  "_resolved": "https://registry.npmjs.org/stdio/-/stdio-0.2.3.tgz"
}
